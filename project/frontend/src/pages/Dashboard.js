import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import AlertNotification from '../components/AlertNotification';
import mockApi from '../services/mockApi';

const Dashboard = () => {
  const [farmStats, setFarmStats] = useState({
    complianceScore: 0,
    totalAnimals: 0,
    healthyAnimals: 0,
    lastInspection: ''
  });
  const [alerts, setAlerts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [language, setLanguage] = useState('en');

  const translations = {
    en: {
      title: 'Pashu Kavach Dashboard',
      welcome: 'Welcome',
      recentAlerts: 'Recent Alerts',
      noAlerts: 'No active alerts',
      complianceScore: 'Compliance Score',
      totalAnimals: 'Total Animals',
      healthyAnimals: 'Healthy Animals',
      lastInspection: 'Last Inspection',
      quickActions: 'Quick Actions',
      biosecurityChecklist: 'Biosecurity Checklist',
      healthRecords: 'Health Records',
      feedManagement: 'Feed Management',
      productionReports: 'Production Reports',
      videoUpload: 'Video Upload & Awareness'
    },
    hi: {
      title: '‡§™‡§∂‡•Å ‡§ï‡§µ‡§ö ‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§°',
      welcome: '‡§∏‡•ç‡§µ‡§æ‡§ó‡§§',
      recentAlerts: '‡§π‡§æ‡§≤ ‡§ï‡•Ä ‡§Ö‡§≤‡§∞‡•ç‡§ü',
      noAlerts: '‡§ï‡•ã‡§à ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§Ö‡§≤‡§∞‡•ç‡§ü ‡§®‡§π‡•Ä‡§Ç',
      complianceScore: '‡§Ö‡§®‡•Å‡§™‡§æ‡§≤‡§® ‡§∏‡•ç‡§ï‡•ã‡§∞',
      totalAnimals: '‡§ï‡•Å‡§≤ ‡§™‡§∂‡•Å',
      healthyAnimals: '‡§∏‡•ç‡§µ‡§∏‡•ç‡§• ‡§™‡§∂‡•Å',
      lastInspection: '‡§Ö‡§Ç‡§§‡§ø‡§Æ ‡§®‡§ø‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£',
      quickActions: '‡§§‡•ç‡§µ‡§∞‡§ø‡§§ ‡§ï‡§æ‡§∞‡•ç‡§Ø',
      biosecurityChecklist: '‡§ú‡•à‡§µ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§ö‡•á‡§ï‡§≤‡§ø‡§∏‡•ç‡§ü',
      healthRecords: '‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§°',
      feedManagement: '‡§Ü‡§π‡§æ‡§∞ ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§®',
      productionReports: '‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§® ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü',
      videoUpload: '‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§Ö‡§™‡§≤‡•ã‡§° ‡§î‡§∞ ‡§ú‡§æ‡§ó‡§∞‡•Ç‡§ï‡§§‡§æ'
    },
    te: {
      title: '‡∞™‡∞∂‡±Å ‡∞ï‡∞µ‡∞ö‡±ç ‡∞°‡∞æ‡∞∑‡±ç‚Äå‡∞¨‡±ã‡∞∞‡±ç‡∞°‡±ç',
      welcome: '‡∞∏‡±ç‡∞µ‡∞æ‡∞ó‡∞§‡∞Ç',
      recentAlerts: '‡∞á‡∞ü‡±Ä‡∞µ‡∞≤‡∞ø ‡∞Ö‡∞≤‡∞∞‡±ç‡∞ü‡±ç‚Äå‡∞≤‡±Å',
      noAlerts: '‡∞ï‡±ç‡∞∞‡∞ø‡∞Ø‡∞æ‡∞∂‡±Ä‡∞≤ ‡∞Ö‡∞≤‡∞∞‡±ç‡∞ü‡±ç‚Äå‡∞≤‡±Å ‡∞≤‡±á‡∞µ‡±Å',
      complianceScore: '‡∞ï‡∞Ç‡∞™‡±ç‡∞≤‡∞Ø‡∞®‡±ç‡∞∏‡±ç ‡∞∏‡±ç‡∞ï‡±ã‡∞∞‡±ç',
      totalAnimals: '‡∞Æ‡±ä‡∞§‡±ç‡∞§‡∞Ç ‡∞ú‡∞Ç‡∞§‡±Å‡∞µ‡±Å‡∞≤‡±Å',
      healthyAnimals: '‡∞Ü‡∞∞‡±ã‡∞ó‡±ç‡∞Ø‡∞ï‡∞∞‡∞Æ‡±à‡∞® ‡∞ú‡∞Ç‡∞§‡±Å‡∞µ‡±Å‡∞≤‡±Å',
      lastInspection: '‡∞ö‡∞ø‡∞µ‡∞∞‡∞ø ‡∞§‡∞®‡∞ø‡∞ñ‡±Ä',
      quickActions: '‡∞§‡±ç‡∞µ‡∞∞‡∞ø‡∞§ ‡∞ö‡∞∞‡±ç‡∞Ø‡∞≤‡±Å',
      biosecurityChecklist: '‡∞¨‡∞Ø‡±ã‡∞∏‡±Ü‡∞ï‡±ç‡∞Ø‡±Ç‡∞∞‡∞ø‡∞ü‡±Ä ‡∞ö‡±Ü‡∞ï‡±ç‚Äå‡∞≤‡∞ø‡∞∏‡±ç‡∞ü‡±ç',
      healthRecords: '‡∞Ü‡∞∞‡±ã‡∞ó‡±ç‡∞Ø ‡∞∞‡∞ø‡∞ï‡∞æ‡∞∞‡±ç‡∞°‡±Å‡∞≤‡±Å',
      feedManagement: '‡∞Ü‡∞π‡∞æ‡∞∞ ‡∞®‡∞ø‡∞∞‡±ç‡∞µ‡∞π‡∞£',
      productionReports: '‡∞â‡∞§‡±ç‡∞™‡∞æ‡∞¶‡∞® ‡∞®‡∞ø‡∞µ‡±á‡∞¶‡∞ø‡∞ï‡∞≤‡±Å',
      videoUpload: '‡∞µ‡±Ä‡∞°‡∞ø‡∞Ø‡±ã ‡∞Ö‡∞™‡±ç‚Äå‡∞≤‡±ã‡∞°‡±ç & ‡∞Ö‡∞µ‡∞ó‡∞æ‡∞π‡∞®'
    },
    ta: {
      title: '‡Æ™‡Æö‡ØÅ ‡Æï‡Æµ‡Æö‡Øç ‡Æü‡Ææ‡Æ∑‡Øç‡Æ™‡Øã‡Æ∞‡Øç‡Æü‡ØÅ',
      welcome: '‡Æµ‡Æ∞‡Æµ‡Øá‡Æ±‡Øç‡Æï‡Æø‡Æ±‡Øã‡ÆÆ‡Øç',
      recentAlerts: '‡Æö‡ÆÆ‡ØÄ‡Æ™‡Æ§‡Øç‡Æ§‡Æø‡ÆØ ‡Æé‡Æö‡Øç‡Æö‡Æ∞‡Æø‡Æï‡Øç‡Æï‡Øà‡Æï‡Æ≥‡Øç',
      noAlerts: '‡Æö‡ØÜ‡ÆØ‡Æ≤‡Æø‡Æ≤‡Øç ‡Æâ‡Æ≥‡Øç‡Æ≥ ‡Æé‡Æö‡Øç‡Æö‡Æ∞‡Æø‡Æï‡Øç‡Æï‡Øà‡Æï‡Æ≥‡Øç ‡Æá‡Æ≤‡Øç‡Æ≤‡Øà',
      complianceScore: '‡Æá‡Æ£‡Æï‡Øç‡Æï ‡ÆÆ‡Æ§‡Æø‡Æ™‡Øç‡Æ™‡ØÜ‡Æ£‡Øç',
      totalAnimals: '‡ÆÆ‡Øä‡Æ§‡Øç‡Æ§ ‡Æµ‡Æø‡Æ≤‡Æô‡Øç‡Æï‡ØÅ‡Æï‡Æ≥‡Øç',
      healthyAnimals: '‡ÆÜ‡Æ∞‡Øã‡Æï‡Øç‡Æï‡Æø‡ÆØ‡ÆÆ‡Ææ‡Æ© ‡Æµ‡Æø‡Æ≤‡Æô‡Øç‡Æï‡ØÅ‡Æï‡Æ≥‡Øç',
      lastInspection: '‡Æï‡Æü‡Øà‡Æö‡Æø ‡ÆÜ‡ÆØ‡Øç‡Æµ‡ØÅ',
      quickActions: '‡Æµ‡Æø‡Æ∞‡Øà‡Æµ‡ØÅ ‡Æ®‡Æü‡Æµ‡Æü‡Æø‡Æï‡Øç‡Æï‡Øà‡Æï‡Æ≥‡Øç',
      biosecurityChecklist: '‡Æâ‡ÆØ‡Æø‡Æ∞‡Øç‡Æ™‡Ææ‡Æ§‡ØÅ‡Æï‡Ææ‡Æ™‡Øç‡Æ™‡ØÅ ‡Æö‡Æ∞‡Æø‡Æ™‡Ææ‡Æ∞‡Øç‡Æ™‡Øç‡Æ™‡ØÅ ‡Æ™‡Æü‡Øç‡Æü‡Æø‡ÆØ‡Æ≤‡Øç',
      healthRecords: '‡Æö‡ØÅ‡Æï‡Ææ‡Æ§‡Ææ‡Æ∞ ‡Æ™‡Æ§‡Æø‡Æµ‡ØÅ‡Æï‡Æ≥‡Øç',
      feedManagement: '‡Æ§‡ØÄ‡Æµ‡Æ© ‡ÆÆ‡Øá‡Æ≤‡Ææ‡Æ£‡Øç‡ÆÆ‡Øà',
      productionReports: '‡Æâ‡Æ±‡Øç‡Æ™‡Æ§‡Øç‡Æ§‡Æø ‡ÆÖ‡Æ±‡Æø‡Æï‡Øç‡Æï‡Øà‡Æï‡Æ≥‡Øç',
      videoUpload: '‡Æµ‡ØÄ‡Æü‡Æø‡ÆØ‡Øã ‡Æ™‡Æ§‡Æø‡Æµ‡Øá‡Æ±‡Øç‡Æ±‡ÆÆ‡Øç & ‡Æµ‡Æø‡Æ¥‡Æø‡Æ™‡Øç‡Æ™‡ØÅ‡Æ£‡Æ∞‡Øç‡Æµ‡ØÅ'
    },
    mr: {
      title: '‡§™‡§∂‡•Å ‡§ï‡§µ‡§ö ‡§°‡•Ö‡§∂‡§¨‡•ã‡§∞‡•ç‡§°',
      welcome: '‡§∏‡•ç‡§µ‡§æ‡§ó‡§§',
      recentAlerts: '‡§Ö‡§≤‡•Ä‡§ï‡§°‡•Ä‡§≤ ‡§Ö‡§≤‡§∞‡•ç‡§ü',
      noAlerts: '‡§ï‡•ã‡§£‡§§‡•á‡§π‡•Ä ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§Ö‡§≤‡§∞‡•ç‡§ü ‡§®‡§æ‡§π‡•Ä‡§§',
      complianceScore: '‡§Ö‡§®‡•Å‡§™‡§æ‡§≤‡§® ‡§∏‡•ç‡§ï‡•ã‡§Ö‡§∞',
      totalAnimals: '‡§è‡§ï‡•Ç‡§£ ‡§™‡•ç‡§∞‡§æ‡§£‡•Ä',
      healthyAnimals: '‡§®‡§ø‡§∞‡•ã‡§ó‡•Ä ‡§™‡•ç‡§∞‡§æ‡§£‡•Ä',
      lastInspection: '‡§∂‡•á‡§µ‡§ü‡§ö‡•Ä ‡§§‡§™‡§æ‡§∏‡§£‡•Ä',
      quickActions: '‡§§‡•ç‡§µ‡§∞‡§ø‡§§ ‡§ï‡•É‡§§‡•Ä',
      biosecurityChecklist: '‡§ú‡•à‡§µ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§ö‡•á‡§ï‡§≤‡§ø‡§∏‡•ç‡§ü',
      healthRecords: '‡§Ü‡§∞‡•ã‡§ó‡•ç‡§Ø ‡§®‡•ã‡§Ç‡§¶‡•Ä',
      feedManagement: '‡§Ü‡§π‡§æ‡§∞ ‡§µ‡•ç‡§Ø‡§µ‡§∏‡•ç‡§•‡§æ‡§™‡§®',
      productionReports: '‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§® ‡§Ö‡§π‡§µ‡§æ‡§≤',
      videoUpload: '‡§µ‡•ç‡§π‡§ø‡§°‡§ø‡§ì ‡§Ö‡§™‡§≤‡•ã‡§° ‡§Ü‡§£‡§ø ‡§ú‡§æ‡§ó‡§∞‡•Ç‡§ï‡§§‡§æ'
    }
  };

  const t = translations[language];

  useEffect(() => {
    fetchDashboardData();
    fetchAlerts();
  }, []);

  const fetchDashboardData = async () => {
    try {
      const data = await mockApi.getDashboard();
      setFarmStats(data);
    } catch (error) {
      console.error('Error fetching dashboard data:', error);
    } finally {
      setLoading(false);
    }
  };

  const fetchAlerts = async () => {
    try {
      const data = await mockApi.getAlerts();
      setAlerts(data.alerts || []);
    } catch (error) {
      console.error('Error fetching alerts:', error);
    }
  };

  const user = JSON.parse(localStorage.getItem('user') || '{}');

  if (loading) {
    return <div className="loading">Loading dashboard...</div>;
  }

  return (
    <div className="dashboard">
      <header className="dashboard-header">
        <h1>{t.title}</h1>
        <div className="header-controls">
          <select 
            value={language} 
            onChange={(e) => setLanguage(e.target.value)}
            className="language-selector"
          >
            <option value="en">English</option>
            <option value="hi">‡§π‡§ø‡§Ç‡§¶‡•Ä</option>
            <option value="te">‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å</option>
            <option value="ta">‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç</option>
            <option value="mr">‡§Æ‡§∞‡§æ‡§†‡•Ä</option>
          </select>
          <div className="user-info">
            <span>{t.welcome}, {user.name || 'Farmer'}</span>
          </div>
        </div>
      </header>

      <div className="dashboard-content">
        <div className="alerts-section">
          <h3>{t.recentAlerts}</h3>
          {alerts.length > 0 ? (
            alerts.map(alert => (
              <AlertNotification key={alert.id} alert={alert} />
            ))
          ) : (
            <p>{t.noAlerts}</p>
          )}
        </div>

        <div className="stats-grid">
          <div className="stat-card">
            <h4>{t.complianceScore}</h4>
            <div className="score">{farmStats.complianceScore}%</div>
            <div className="score-bar">
              <div 
                className="score-fill" 
                style={{width: `${farmStats.complianceScore}%`}}
              ></div>
            </div>
            <small>Based on biosecurity checklist completion</small>
          </div>

          <div className="stat-card">
            <h4>{t.totalAnimals}</h4>
            <div className="number">{farmStats.totalAnimals}</div>
          </div>

          <div className="stat-card">
            <h4>{t.healthyAnimals}</h4>
            <div className="number">{farmStats.healthyAnimals}</div>
          </div>

          <div className="stat-card">
            <h4>{t.lastInspection}</h4>
            <div className="date">{farmStats.lastInspection}</div>
          </div>
        </div>

        <div className="quick-actions">
          <h3>{t.quickActions}</h3>
          <div className="action-buttons">
            <Link to="/checklist" className="btn-action">
              üìã {t.biosecurityChecklist}
            </Link>
            <Link to="/health-records" className="btn-action">
              üìä {t.healthRecords}
            </Link>
            <Link to="/feed-management" className="btn-action">
              üçΩÔ∏è {t.feedManagement}
            </Link>
            <Link to="/production-reports" className="btn-action">
              üìà {t.productionReports}
            </Link>
            <Link to="/video-upload" className="btn-action">
              üìπ {t.videoUpload}
            </Link>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Dashboard;
