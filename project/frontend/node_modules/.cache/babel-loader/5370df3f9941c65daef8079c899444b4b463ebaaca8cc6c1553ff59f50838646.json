{"ast":null,"code":"// Mock API for demo without backend\nconst mockApi = {\n  async register(userData) {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n\n    // Store user data in localStorage\n    const users = JSON.parse(localStorage.getItem('demoUsers') || '[]');\n    if (users.find(u => u.mobile === userData.mobile)) {\n      throw new Error('User already exists with this mobile number');\n    }\n    const user = {\n      id: Date.now(),\n      ...userData,\n      createdAt: new Date().toISOString()\n    };\n    users.push(user);\n    localStorage.setItem('demoUsers', JSON.stringify(users));\n    localStorage.setItem('currentUser', JSON.stringify(user));\n    return {\n      message: 'Registration successful',\n      token: 'demo_token_' + user.id,\n      user: {\n        id: user.id,\n        name: user.name,\n        mobile: user.mobile,\n        farmType: user.farmType\n      }\n    };\n  },\n  async login(credentials) {\n    await new Promise(resolve => setTimeout(resolve, 800));\n    const users = JSON.parse(localStorage.getItem('demoUsers') || '[]');\n    const user = users.find(u => u.mobile === credentials.mobile && u.password === credentials.password);\n    if (!user) {\n      throw new Error('Invalid credentials');\n    }\n    localStorage.setItem('currentUser', JSON.stringify(user));\n    return {\n      message: 'Login successful',\n      token: 'demo_token_' + user.id,\n      user: {\n        id: user.id,\n        name: user.name,\n        mobile: user.mobile,\n        farmType: user.farmType\n      }\n    };\n  },\n  async getDashboard() {\n    await new Promise(resolve => setTimeout(resolve, 500));\n    return {\n      totalAnimals: 250,\n      healthyAnimals: 245,\n      complianceScore: 85,\n      lastInspection: '2025-09-15'\n    };\n  },\n  async getAlerts() {\n    await new Promise(resolve => setTimeout(resolve, 300));\n    return {\n      alerts: [{\n        id: 1,\n        type: 'warning',\n        message: 'Avian Flu reported 15km away',\n        time: '2 hours ago'\n      }, {\n        id: 2,\n        type: 'info',\n        message: 'Vaccination reminder due tomorrow',\n        time: '1 day ago'\n      }]\n    };\n  },\n  async getBiosecurityChecklist() {\n    await new Promise(resolve => setTimeout(resolve, 400));\n    const saved = localStorage.getItem('biosecurityData');\n    if (saved) {\n      return JSON.parse(saved);\n    }\n    return {\n      checklist: [{\n        id: 1,\n        item: 'Footbath at farm entrance',\n        checked: false,\n        critical: true\n      }, {\n        id: 2,\n        item: 'Visitor log maintained',\n        checked: false,\n        critical: true\n      }, {\n        id: 3,\n        item: 'Animals isolated when sick',\n        checked: false,\n        critical: true\n      }, {\n        id: 4,\n        item: 'Feed storage properly secured',\n        checked: false,\n        critical: false\n      }, {\n        id: 5,\n        item: 'Water sources protected',\n        checked: false,\n        critical: true\n      }, {\n        id: 6,\n        item: 'Waste disposal system in place',\n        checked: false,\n        critical: true\n      }, {\n        id: 7,\n        item: 'Regular cleaning schedule followed',\n        checked: false,\n        critical: false\n      }, {\n        id: 8,\n        item: 'Vaccination records updated',\n        checked: false,\n        critical: true\n      }, {\n        id: 9,\n        item: 'Equipment disinfected regularly',\n        checked: false,\n        critical: false\n      }, {\n        id: 10,\n        item: 'Dead animal disposal protocol',\n        checked: false,\n        critical: true\n      }],\n      complianceScore: 0\n    };\n  },\n  async updateBiosecurityChecklist(checklist) {\n    await new Promise(resolve => setTimeout(resolve, 600));\n    const totalItems = checklist.length;\n    const checkedItems = checklist.filter(item => item.checked).length;\n    const complianceScore = Math.round(checkedItems / totalItems * 100);\n    const data = {\n      checklist,\n      complianceScore\n    };\n    localStorage.setItem('biosecurityData', JSON.stringify(data));\n    return {\n      message: 'Checklist updated successfully',\n      complianceScore\n    };\n  }\n};\nexport default mockApi;","map":{"version":3,"names":["mockApi","register","userData","Promise","resolve","setTimeout","users","JSON","parse","localStorage","getItem","find","u","mobile","Error","user","id","Date","now","createdAt","toISOString","push","setItem","stringify","message","token","name","farmType","login","credentials","password","getDashboard","totalAnimals","healthyAnimals","complianceScore","lastInspection","getAlerts","alerts","type","time","getBiosecurityChecklist","saved","checklist","item","checked","critical","updateBiosecurityChecklist","totalItems","length","checkedItems","filter","Math","round","data"],"sources":["/home/admin-cse/Desktop/SIH_avanti/SIH_2025/project/frontend/src/services/mockApi.js"],"sourcesContent":["// Mock API for demo without backend\nconst mockApi = {\n  async register(userData) {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    // Store user data in localStorage\n    const users = JSON.parse(localStorage.getItem('demoUsers') || '[]');\n    \n    if (users.find(u => u.mobile === userData.mobile)) {\n      throw new Error('User already exists with this mobile number');\n    }\n\n    const user = {\n      id: Date.now(),\n      ...userData,\n      createdAt: new Date().toISOString()\n    };\n\n    users.push(user);\n    localStorage.setItem('demoUsers', JSON.stringify(users));\n    localStorage.setItem('currentUser', JSON.stringify(user));\n\n    return {\n      message: 'Registration successful',\n      token: 'demo_token_' + user.id,\n      user: {\n        id: user.id,\n        name: user.name,\n        mobile: user.mobile,\n        farmType: user.farmType\n      }\n    };\n  },\n\n  async login(credentials) {\n    await new Promise(resolve => setTimeout(resolve, 800));\n    \n    const users = JSON.parse(localStorage.getItem('demoUsers') || '[]');\n    const user = users.find(u => \n      u.mobile === credentials.mobile && u.password === credentials.password\n    );\n\n    if (!user) {\n      throw new Error('Invalid credentials');\n    }\n\n    localStorage.setItem('currentUser', JSON.stringify(user));\n\n    return {\n      message: 'Login successful',\n      token: 'demo_token_' + user.id,\n      user: {\n        id: user.id,\n        name: user.name,\n        mobile: user.mobile,\n        farmType: user.farmType\n      }\n    };\n  },\n\n  async getDashboard() {\n    await new Promise(resolve => setTimeout(resolve, 500));\n    \n    return {\n      totalAnimals: 250,\n      healthyAnimals: 245,\n      complianceScore: 85,\n      lastInspection: '2025-09-15'\n    };\n  },\n\n  async getAlerts() {\n    await new Promise(resolve => setTimeout(resolve, 300));\n    \n    return {\n      alerts: [\n        { id: 1, type: 'warning', message: 'Avian Flu reported 15km away', time: '2 hours ago' },\n        { id: 2, type: 'info', message: 'Vaccination reminder due tomorrow', time: '1 day ago' }\n      ]\n    };\n  },\n\n  async getBiosecurityChecklist() {\n    await new Promise(resolve => setTimeout(resolve, 400));\n    \n    const saved = localStorage.getItem('biosecurityData');\n    if (saved) {\n      return JSON.parse(saved);\n    }\n\n    return {\n      checklist: [\n        { id: 1, item: 'Footbath at farm entrance', checked: false, critical: true },\n        { id: 2, item: 'Visitor log maintained', checked: false, critical: true },\n        { id: 3, item: 'Animals isolated when sick', checked: false, critical: true },\n        { id: 4, item: 'Feed storage properly secured', checked: false, critical: false },\n        { id: 5, item: 'Water sources protected', checked: false, critical: true },\n        { id: 6, item: 'Waste disposal system in place', checked: false, critical: true },\n        { id: 7, item: 'Regular cleaning schedule followed', checked: false, critical: false },\n        { id: 8, item: 'Vaccination records updated', checked: false, critical: true },\n        { id: 9, item: 'Equipment disinfected regularly', checked: false, critical: false },\n        { id: 10, item: 'Dead animal disposal protocol', checked: false, critical: true }\n      ],\n      complianceScore: 0\n    };\n  },\n\n  async updateBiosecurityChecklist(checklist) {\n    await new Promise(resolve => setTimeout(resolve, 600));\n    \n    const totalItems = checklist.length;\n    const checkedItems = checklist.filter(item => item.checked).length;\n    const complianceScore = Math.round((checkedItems / totalItems) * 100);\n\n    const data = {\n      checklist,\n      complianceScore\n    };\n\n    localStorage.setItem('biosecurityData', JSON.stringify(data));\n\n    return {\n      message: 'Checklist updated successfully',\n      complianceScore\n    };\n  }\n};\n\nexport default mockApi;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}